//
// File generated by /apps/root/5.34.36/root//bin/rootcint at Mon Nov 25 15:23:07 2019

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIExpTableDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ExpTableDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TExpTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TExpTable(void *p);
   static void deleteArray_TExpTable(void *p);
   static void destruct_TExpTable(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TExpTable*)
   {
      ::TExpTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TExpTable >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TExpTable", ::TExpTable::Class_Version(), "./include/TExpTable.h", 26,
                  typeid(::TExpTable), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TExpTable::Dictionary, isa_proxy, 4,
                  sizeof(::TExpTable) );
      instance.SetDelete(&delete_TExpTable);
      instance.SetDeleteArray(&deleteArray_TExpTable);
      instance.SetDestructor(&destruct_TExpTable);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TExpTable*)
   {
      return GenerateInitInstanceLocal((::TExpTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TExpTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TExpTable::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TExpTable::Class_Name()
{
   return "TExpTable";
}

//______________________________________________________________________________
const char *TExpTable::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TExpTable*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TExpTable::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TExpTable*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TExpTable::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TExpTable*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TExpTable::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TExpTable*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TExpTable::Streamer(TBuffer &R__b)
{
   // Stream an object of class TExpTable.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TExpTable::Class(),this);
   } else {
      R__b.WriteClassBuffer(TExpTable::Class(),this);
   }
}

//______________________________________________________________________________
void TExpTable::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TExpTable.
      TClass *R__cl = ::TExpTable::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariableAddresses", &fVariableAddresses);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariableNames", &fVariableNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariableFormats", &fVariableFormats);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariableTypes", &fVariableTypes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNVariables", &fNVariables);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFormats", &fNFormats);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConfigFileName[120]", fConfigFileName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHaveVariables", &fHaveVariables);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHaveTypes", &fHaveTypes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSetupFileName[200]", fSetupFileName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fp", &fp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTableName[200]", fTableName);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_TExpTable(void *p) {
      delete ((::TExpTable*)p);
   }
   static void deleteArray_TExpTable(void *p) {
      delete [] ((::TExpTable*)p);
   }
   static void destruct_TExpTable(void *p) {
      typedef ::TExpTable current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TExpTable

/********************************************************
* src/ExpTableDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableExpTableDict();

extern "C" void G__set_cpp_environmentExpTableDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include/TExpTable.h");
  G__cpp_reset_tagtableExpTableDict();
}
#include <new>
extern "C" int G__cpp_dllrevExpTableDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TExpTable */
static int G__ExpTableDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TExpTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TExpTable((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TExpTable((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((float) G__double(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((float) G__double(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((float) G__double(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TExpTable*) G__getstructoffset())->GetAllForValue((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((TExpTable*) G__getstructoffset())->GetVarAddress((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((TExpTable*) G__getstructoffset())->SetVarAddress((char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TExpTable::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TExpTable::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TExpTable::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TExpTable::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TExpTable*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TExpTable*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TExpTable*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TExpTable*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TExpTable::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TExpTable::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TExpTable::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExpTableDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TExpTable::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ExpTableDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TExpTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TExpTable(*(TExpTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TExpTable G__TTExpTable;
static int G__ExpTableDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TExpTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TExpTable*) (soff+(sizeof(TExpTable)*i)))->~G__TTExpTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TExpTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TExpTable*) (soff))->~G__TTExpTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ExpTableDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TExpTable* dest = (TExpTable*) G__getstructoffset();
   *dest = *(TExpTable*) libp->para[0].ref;
   const TExpTable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TExpTable */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncExpTableDict {
 public:
  G__Sizep2memfuncExpTableDict(): p(&G__Sizep2memfuncExpTableDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncExpTableDict::*p)();
};

size_t G__get_sizep2memfuncExpTableDict()
{
  G__Sizep2memfuncExpTableDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceExpTableDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableExpTableDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ExpTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ExpTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ExpTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ExpTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TExpTable */
static void G__setup_memvarTExpTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable));
   { TExpTable *p; p=(TExpTable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,89,2,0,-1,-1,-1,2,"fVariableAddresses=",0,"Array of addresses of variables to be updated from run table info");
   G__memvar_setup((void*)0,67,2,0,-1,G__defined_typename("Char_t"),-1,2,"fVariableNames=",0,"Array of names of variables");
   G__memvar_setup((void*)0,67,2,0,-1,G__defined_typename("Char_t"),-1,2,"fVariableFormats=",0,"Array of format strings for scanning in each variable");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVariableTypes=",0,"Array of Types");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNVariables=",0,"No of variable columns in the run table");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNFormats=",0,"No of format columns in the run table");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fConfigFileName[120]=",0,"Name of the Run Table");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fHaveVariables=",0,"flag that a Variables: line has alread been processed");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fHaveTypes=",0,"flag that a Types: line has alread been processed");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fSetupFileName[200]=",0,"name of run table file");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,2,"fp=",0,"pointer the file");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fTableName[200]=",0,"name of the run table");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ExpTableDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarExpTableDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTExpTable(void) {
   /* TExpTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable));
   G__memfunc_setup("TExpTable",873,G__ExpTableDict_170_0_1, 105, G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable), -1, 0, 2, 1, 1, 0, 
"C - - 10 - SetupFile C - - 10 - TableName", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("GetAllForValue",1373,G__ExpTableDict_170_0_2, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - value C - - 0 - variable1 "
"C - - 0 'NULL' variable2 i - - 0 '0' range", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllForValue",1373,G__ExpTableDict_170_0_3, 105, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - value C - - 0 - variable1 "
"C - - 0 'NULL' variable2 f - - 0 '-1.0' range", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAllForValue",1373,G__ExpTableDict_170_0_4, 105, -1, -1, 0, 3, 1, 1, 0, 
"C - - 0 - value C - - 0 - variable1 "
"i - - 0 '0' perfectmatch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVarAddress",1295,G__ExpTableDict_170_0_5, 89, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - variable", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVarAddress",1307,G__ExpTableDict_170_0_6, 89, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - variable Y - - 0 - address", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ExpTableDict_170_0_7, 85, G__get_linked_tagnum(&G__ExpTableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TExpTable::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ExpTableDict_170_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TExpTable::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ExpTableDict_170_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TExpTable::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ExpTableDict_170_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TExpTable::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__ExpTableDict_170_0_11, 85, G__get_linked_tagnum(&G__ExpTableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__ExpTableDict_170_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__ExpTableDict_170_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ExpTableDict_170_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ExpTableDict_170_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TExpTable::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ExpTableDict_170_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TExpTable::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ExpTableDict_170_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TExpTable::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ExpTableDict_170_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TExpTable::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TExpTable", 873, G__ExpTableDict_170_0_19, (int) ('i'), G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable), -1, 0, 1, 1, 1, 0, "u 'TExpTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TExpTable", 999, G__ExpTableDict_170_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ExpTableDict_170_0_21, (int) ('u'), G__get_linked_tagnum(&G__ExpTableDictLN_TExpTable), -1, 1, 1, 1, 1, 0, "u 'TExpTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncExpTableDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalExpTableDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcExpTableDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ExpTableDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ExpTableDictLN_TExpTable = { "TExpTable" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableExpTableDict() {
  G__ExpTableDictLN_TClass.tagnum = -1 ;
  G__ExpTableDictLN_TBuffer.tagnum = -1 ;
  G__ExpTableDictLN_TMemberInspector.tagnum = -1 ;
  G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ExpTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ExpTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ExpTableDictLN_TExpTable.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableExpTableDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ExpTableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ExpTableDictLN_TExpTable),sizeof(TExpTable),-1,295936,(char*)NULL,G__setup_memvarTExpTable,G__setup_memfuncTExpTable);
}
extern "C" void G__cpp_setupExpTableDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupExpTableDict()");
  G__set_cpp_environmentExpTableDict();
  G__cpp_setup_tagtableExpTableDict();

  G__cpp_setup_inheritanceExpTableDict();

  G__cpp_setup_typetableExpTableDict();

  G__cpp_setup_memvarExpTableDict();

  G__cpp_setup_memfuncExpTableDict();
  G__cpp_setup_globalExpTableDict();
  G__cpp_setup_funcExpTableDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncExpTableDict();
  return;
}
class G__cpp_setup_initExpTableDict {
  public:
    G__cpp_setup_initExpTableDict() { G__add_setup_func("ExpTableDict",(G__incsetup)(&G__cpp_setupExpTableDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initExpTableDict() { G__remove_setup_func("ExpTableDict"); }
};
G__cpp_setup_initExpTableDict G__cpp_setup_initializerExpTableDict;

